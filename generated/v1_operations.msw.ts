/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Operations API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  CosmicapisProtoEmpty,
  ListOperationsResponse,
  Operation
} from './v1_operations.schemas';


export const getOperationsListOperationsResponseMock = (overrideResponse: Partial< ListOperationsResponse > = {}): ListOperationsResponse => ({operations: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), metadata: {...{'@type': faker.string.alpha(20)},}, done: faker.datatype.boolean(), error: {...{code: faker.number.int({min: undefined, max: undefined}), message: faker.string.alpha(20), details: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({'@type': faker.string.alpha(20)}))},}, response: {...{'@type': faker.string.alpha(20)},}})), nextPageToken: faker.string.alpha(20), ...overrideResponse})

export const getOperationsGetOperationResponseMock = (overrideResponse: Partial< Operation > = {}): Operation => ({name: faker.string.alpha(20), metadata: {...{'@type': faker.string.alpha(20)},}, done: faker.datatype.boolean(), error: {...{code: faker.number.int({min: undefined, max: undefined}), message: faker.string.alpha(20), details: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({'@type': faker.string.alpha(20)}))},}, response: {...{'@type': faker.string.alpha(20)},}, ...overrideResponse})

export const getOperationsDeleteOperationResponseMock = (overrideResponse: Partial< CosmicapisProtoEmpty > = {}): CosmicapisProtoEmpty => ({...overrideResponse})


export const getOperationsListOperationsMockHandler = (overrideResponse?: ListOperationsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListOperationsResponse> | ListOperationsResponse)) => {
  return http.get('http://localhost:3333/operations/v1/operations', async (info) => {await delay(0);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getOperationsListOperationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getOperationsGetOperationMockHandler = (overrideResponse?: Operation | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Operation> | Operation)) => {
  return http.get('http://localhost:3333/operations/v1/operations/:operation', async (info) => {await delay(0);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getOperationsGetOperationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getOperationsDeleteOperationMockHandler = (overrideResponse?: CosmicapisProtoEmpty | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<CosmicapisProtoEmpty> | CosmicapisProtoEmpty)) => {
  return http.delete('http://localhost:3333/operations/v1/operations/:operation', async (info) => {await delay(0);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getOperationsDeleteOperationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getOperationsCancelOperationMockHandler = (overrideResponse?: Status | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Status> | Status)) => {
  return http.post('http://localhost:3333/operations/v1/operations/:operation:cancel', async (info) => {await delay(0);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}
export const getOperationsAPIMock = () => [
  getOperationsListOperationsMockHandler(),
  getOperationsGetOperationMockHandler(),
  getOperationsDeleteOperationMockHandler(),
  getOperationsCancelOperationMockHandler()
]
